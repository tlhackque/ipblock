#!/bin/bash

# Copyright (C) 2017, 2018, 2020, 2021, 2023 Timothe Litt litt at acm ddot org

# Completely & quickly block specific ip address(es)

# shellcheck disable=SC2016 # git expands, not the shell
VERSION='$Id$'

# shellcheck disable=SC2034 # used by Makefile
RELEASE='1.7.0'

SELF="$(basename "$0")"

function displayVersion() {
    if [[ "$VERSION" =~ ^'$''Id: '[[:xdigit:]]{24}([[:xdigit:]]{4})([[:xdigit:]]{4})([[:xdigit:]]{4})([[:xdigit:]]{4})' $'$ ]]; then
        printf "$SELF version %s-%s-%s-%s\n%*s release %s\n" \
               "${BASH_REMATCH[-4]}" "${BASH_REMATCH[-3]}" "${BASH_REMATCH[-2]}" "${BASH_REMATCH[-1]}" "${#SELF}" "" "$RELEASE"
        return 0
    fi
    echo "$SELF version '$VERSION' - format error"
    exit 1
}

# Read any configuration file

OPTIONS=

if [ -f "/etc/default/$SELF.conf" ]; then
    eval "$( sed -e'/^ *OPTIONS=/!d' "/etc/default/$SELF.conf" )"
elif [ -f "/etc/sysconfig/$SELF.conf" ]; then
    eval "$( sed -e'/^ *OPTIONS=/!d' "/etc/sysconfig/$SELF.conf" )"
fi

# shellcheck disable=SC2086,SC2294 # word splitting intended, eval is for ', not arrays
[ -n "$OPTIONS" ] && eval set -- $OPTIONS "$@"

# Set default symbols

BlackList="BlackList"
Chain="INPUT"
Chain6=
DateFormat="+%a %d-%b-%Y %T %Z"

# NOTE: The help text below is automagically inserted into README.md
#       to create the man page.  Thus, it must be valid Markdown.

function displayHelp {
    cat <<EOF
Completely block IP address(es) with iptables

Used to quickly block an attacker by host name or ip address.  Not
persistent across reboots.

Usage: $SELF [options] [addresses]

EOF

    cat <<'EOF'
```
    -4        IPv4 addresses
    -6        IPv6 addresses
    -v        Verbose output
    -n        Numeric output (don't lookup hostnames)

    -A        Add IP addresses to block list (default if address specified)
    -R        Remove IP addresses from block list
    -F        Flush block list
    -L        List currently blocked IP addresses and last seen time (default)
    -S file   Save current addresses as a script.  (use - for stdout)
    -a        With -S, add to existing output file
    -r        With -S, save in raw format (just IP address list, e.g. for BlockCountries)
    -T tps    Use tps as the jiffys/sec (only if /boot/config-<kernel> is not available.
    -t        Estimate -T
    -X        Disable ipblock and remove its rule.  May not fluah list.
    -V        Display version

    -D fmt    Date format (strftime) (Default is '%a %d-%b-%Y %T %Z'), null for ctime

    -C:chain  Specify chain to hook (default is INPUT)
    -c:chain  Specify chain for IPv6 hook (default is same name as IPv4)
    -N:table  Recent table name that maintains list. (Default is BlackList)
              IPv6 adds '6' to the specified name (Thus, IPv6 default is BlackList6)
```
EOF
    cat <<EOF

Most options should be placed in ${SELF}.conf, making use very simple.

The most common usage is

    $SELF address

If neither -4 nor -6 is specified:
    If a numeric address is specified, the address family is used.
    Otherwise, the default is -4

Option -L ignores -4 & -6; it accesses all tables present.

Option -T is only required when the kernel configuration file is not mounted on /boot, as
happens with some VPS providers.  The value is the jiffies (ticks) per second of
the kernel.  Typical values are 50, 60, 100, 250, 1000.  -t will, on an unloaded
system, provide an estimate of the correct value.

If a hostname is specrified, only the selected address family is blocked.  If a
host has both an IPv4 and an IPv6 address, two ipblock commands must be used.

CAUTION: No checks are performed on the specified address; you can block systems
         on your local network, or even the local host itself.

$SELF maintains an ip_recent list - does not reload rules.

$SELF installs a single rule at the start of the specified chain, if not already present.
Installing the rule does not flush an existing list.

Note that the iptables _recent_ module limits the number of addresses that can
be blocked.  The current limit is $MAXENT, but it can be changed with the
module parameter ip\_list\_tot to modprobe.  Exceeding the limit will cause
the oldest entries to be silently discarded.

You can change the default options by specifying OPTIONS in
/etc/sysconfig/$SELF or /etc/default/$SELF  In OPTIONS, values that include spaces
must be in single quotes ('').  this only applies to -D.

To avoid locking yourself out, specify a chain that INPUT calls AFTER guard rules
that protect your local network.  E.g. in your standard rules, start with:

> iptables -N BLOCKED  
> iptables -A -i lo -j ACCEPT  
> iptables -A INPUT -s _mylan_,_trustedpublic_. -j ACCEPT  
> iptables -A INPUT -j BLOCKED

and in ipblock.conf

> OPTIONS="-C BLOCKED"

Copyright and license: see README.md, in the distribution kit.

EOF

    exit 0
}

IPV=
ACTION=
DEBUG=
V=
APPEND=
TICKS=
NOHOST=
RAW=

if [ -f "/sys/module/ipt_recent/parameters/ip_list_tot" ]; then
    MAXENT="$(cat /sys/module/ipt_recent/parameters/ip_list_tot)"
elif [ -f "/sys/module/xt_recent/parameters/ip_list_tot" ]; then
    MAXENT="$(cat /sys/module/xt_recent/parameters/ip_list_tot)"
else
    MAXENT=100
fi

while getopts "46AC:c:dD:hFLN:nrRaS:tT:vXV-:" opt; do
    case $opt in
        4)
            IPV="4"
            ;;
        6)
            IPV="6"
            ;;
        C)
            Chain="$OPTARG"
            ;;
        c)
            Chain6="$OPTARG"
            ;;
        A)
            ACTION="add"
            ;;
        d)
            DEBUG="Y"
            V="Y"
            ;;
        D)
            if [ -n "$OPTARG" ]; then
                DateFormat="+$( echo "$OPTARG" | sed -e's/_/ /g' )"
            else
                DateFormat=
            fi
            ;;
        h)
            displayHelp
            ;;
        F)
            ACTION="flush"
            ;;
        L)
            ACTION="list"
            ;;
        N)
            BlackList="$OPTARG"
            ;;
        n)
            NOHOST="y"
            ;;
        R)
            ACTION="remove"
            ;;
        S)
            ACTION="save"
            SCRIPT="$OPTARG"
            ;;
        T)
            TICKS="$OPTARG"
            ;;
        t)
            ACTION="estimate"
            ;;

        a)
            APPEND="y"
            ;;
        r)
            RAW="y"
            ;;
        v)
            V="y"
            ;;
        X)
            ACTION="disable"
            ;;
        V)
            displayVersion
            exit 0
            ;;
        -)
            if [ "$OPTARG" == "version" ]; then
                displayVersion
                exit 0
            elif [ "$OPTARG" == 'help' ]; then
                 displayHelp
            else
                echo "Unknown option -$OPTARG" >&2
                exit 1
            fi
            ;;
        *)
            echo "$SELF -h for usage" >&2
            exit 1
            ;;
    esac
done
shift $(( OPTIND - 1 ))

if [ -z "$ACTION" ]; then
    if [ -n "$1" ]; then
        ACTION="add"
    else
        ACTION="list"
    fi
fi

if [ -z "$IPV" ]; then
    if [ -z "$1" ]; then
        IPV="4"
    else
        if [[ "$1" =~ ^[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+$ ]]; then # IPv4 numeric
            IPV="4"
        elif [[ "$1" =~ [:] ]] && [[ "$1"  =~ ^[0-9a-zA-Z:]+$ ]]; then # IPv6 numeric
            IPV="6"
        else
            IPV="4"
        fi
    fi
fi

IPT="iptables"
BlackBase="$BlackList"
if [ "$IPV" == "6" ]; then
    IPT="ip6tables"
    BlackList="${BlackList}6"
    ProcMatch="/proc/net/ip6_tables_matches"
    [ -n "$Chain6" ] && Chain="$Chain6"
else
    ProcMatch="/proc/net/ip_tables_matches"
fi

if ! command -v "$IPT" >/dev/null 2>&1 ; then
    echo "$SELF: $IPT does not exist." >&2
    exit 0
fi

# Should there be a --seconds n --reap option to lockout for specified time?
# N.B. This would make disabling more complex; each --seconds value needs a unique rule.

RULE="$Chain -m recent --name $BlackList --update --rsource -j DROP"

if [ "$ACTION" == "disable" ]; then
    # shellcheck disable=SC2086 # RULE needs word splitting
    $IPT -D $RULE >/dev/null 2>&1
    R="$?"
    [ "$R" == 0 ]   && [ -n "$V" ] && echo "Removed IPv$IPV input rule"
    [ -n "$DEBUG" ] && echo "  $IPT -I $RULE"
    exit $R
fi

# shellcheck disable=SC2086 # RULE needs word splitting
if ! $IPT -C $RULE >/dev/null 2>&1 ; then
    if [[ "$ACTION" =~ ^(flush|list|remove|save)$ ]]; then
        [ -n "$V" ]     && echo "Not installed for IPv$IPV"
        exit 0
    elif $IPT -I $RULE ; then
        [ -n "$V" ]     && echo "Installed IPv$IPV input rule"
        [ -n "$DEBUG" ] && echo "  $IPT -I $RULE"
    else
        RES="$?"
        echo "Unable to install $(basename "$IPT") rule." >&2
        if [ -z "$("$IPT" -S "$Chain")" ]; then
            echo " - The chain \"$Chain\" was tried, but does not seem to be configured" >&2
        elif ! "$IPT" -m recent -h | grep -q 'recent match options' ; then
            echo " - $IPT does not seem to support '-m recent', which is required" >&2
        elif ! grep -q '^recent$' "$ProcMatch" ; then
            echo " - The IPV$IPV kernel match module is not listed in $ProcMatch" >&2
        else
            echo " - I don't know why" >&2
        fi
        [ -n "$DEBUG" ] && echo "  $IPT -I $RULE"
        exit $RES
    fi
fi

# Detect version of "recent" module

if [ -d /proc/net/ipt_recent ]; then
    # Older
    ProcRecent="/proc/net/ipt_recent"
    IPTadd=
    IPTclear="clear"
    [ -n "$DEBUG" ] && echo "Detected ipt_recent"
elif [ -d /proc/net/xt_recent ]; then
    #newer
    ProcRecent="/proc/net/xt_recent"
    IPTadd="+"
    IPTclear="/"
    [ -n "$DEBUG" ] && echo "Detected xt_recent"
else
    echo "$SELF: Unable to determine version of packet filter's 'recent' module" >&2
    exit 1
fi

if [ "$ACTION" == 'estimate' ]; then
    IP="192.0.2.123"
    echo "Estimating -T, please wait (about 10 secs)"
    echo "-$IP" >"$ProcRecent/$BlackList"
    echo "$IPTadd$IP" >"$ProcRecent/$BlackList"
    sleep 10
    echo "$IPTadd$IP" >"$ProcRecent/$BlackList"
    R="$(sed "$ProcRecent/$BlackList" -e"/^src=$IP /!d;" | head -n1)"
    if ! [[ "$R" =~ last_seen:\ ([0-9]+)\ oldest_pkt:\ [0-9]+\ ([0-9]+) ]] ; then
        echo "Test failed: $R" >&2
        echo "-$IP" >"$ProcRecent/$BlackList"
        exit 1
    fi
    echo "-$IP" >"$ProcRecent/$BlackList"
    printf "Suggesting -T %u (may need to round)\n" "$(( ( ( BASH_REMATCH[1] - BASH_REMATCH[2] ) + 5 ) / 10 ))"
    printf "\nCommon values: 100, 250, 300, 1000\n"
    printf "Less common:   1024, 1200, 256, 128, 64, 32, 60, 50\n"

    exit 0
fi

if [ "$ACTION" == "save" ]; then
    export LC_ALL="C"

    function savelines() {
        local v="$1" nohdr="$2" n=0

        if [ -n "$RAW" ]; then
            while IFS= read -r IP; do
                echo "$IP"
                ((++n))
            done
            [ -z "$nohdr" ] && echo "# Count = $n"
            return 0;
        fi

        while IFS= read -r IP; do
            if [[ $((n++ % 16)) == 0 ]]; then
                printf "\n%s %s %s" "$PROG" "$v" "$IP"
            else
                printf " %s" "$IP"
            fi
        done
        [[ $((n % 16)) != 0 ]] && printf "\n"
        [ -z "$nohdr" ] && echo "# Count = $n"
        return 0
    }
    function saveHdr () {
        if [ -z "$RAW" ]; then
            cat <<EOF
#!/bin/bash

EOF
        fi
        cat <<EOF
# Auto-generated by $SELF $(displayVersion | head -n1) on $(date '+%d-%b-%Y %T')

EOF
    }
    function save () {
        local nohdr="$1"
        [ -z "$nohdr" ] && saveHdr
        PROG="$(readlink -en "$0")"
        if [ "$IPV" == "4" ] && [ -f "$ProcRecent/$BlackBase" ]; then
            # shellcheck disable=SC2002 # Redirecting input doesn't work here
            ( cat "$ProcRecent/$BlackBase" | while IFS= read -r LINE; do
                    sed -e's/^src=\([^ ]*\) .*$/\1/' <<<"$LINE"
                done ) |
            sort -u -t . -k1,1n -k2,2n -k3,3n -k4,4n | savelines -4 "$nohdr"
        fi

        if [ "$IPV" == "6" ] && [ -f "$ProcRecent/${BlackBase}6" ]; then
            # shellcheck disable=SC2002 # Redirecting input doesn't work here
            ( cat "$ProcRecent/${BlackBase}6" | while IFS= read -r LINE; do
                    sed -e's/^src=\([^ ]*\) .*$/\1/' <<<"$LINE"
                done ) |
            sort -u -t : -f -k1,1 -k2,2 -k3,3 -k4,4 -k5,5 -k6,6 -k7,7 -k8,8 | savelines -6 "$nohdr"
        fi
        [ -z "$nohdr" ] && echo "# EOF"
    }
    if [ "${SCRIPT}" = '-' ]; then
        save | grep -vP '^# Count = ([0-9]+).*$'
    else
        if [ -n "$APPEND" ] && [ -f "${SCRIPT}" ]; then
            rm -f "${SCRIPT}.tmp"
            sed "${SCRIPT}" -Ee"/^#/d;/^\$/d;s,^[^ ]*/?${SELF}( +-[46])? *,,;;s/ /\n/g;" >"${SCRIPT}.tmp"
            saveHdr >"${SCRIPT}"
            RAW="y" save 'nohdr' >>"${SCRIPT}.tmp"
            if [ "$IPV" == "4" ]; then
                sort -u -t . -k1,1n -k2,2n -k3,3n -k4,4n "${SCRIPT}.tmp" | savelines -4 >>"${SCRIPT}"
            else
                sort -u -t : -f -k1,1 -k2,2 -k3,3 -k4,4 -k5,5 -k6,6 -k7,7 -k8,8 "${SCRIPT}.tmp" | savelines -6 >>"${SCRIPT}"
            fi
            echo "# EOF" >>"${SCRIPT}"
            rm -f "${SCRIPT}.tmp"
        else
            save >"${SCRIPT}"
        fi
        if [ -z "$RAW" ]; then
            chmod +x "${SCRIPT}"
        else
            chmod -x "${SCRIPT}"
        fi
        [ -n "$V" ] && echo "Wrote $(readlink -en "${SCRIPT}")"
        CNT="$(sed "${SCRIPT}" -nEe's/^# Count = ([0-9]+).*$/\1/p')"
        sed -i "${SCRIPT}" -Ee'/^# Count = ([0-9]+).*$/d'
        if [ "$CNT" -gt "$MAXENT" ]; then
            echo "$(readlink -en "${SCRIPT}") lists $CNT addresses, but only $MAXENT will be retained.  See -h for more information."
            exit 2
        fi
    fi

    exit 0
fi

if [ "$ACTION" == "list" ]; then
    # ticks/sec
    if [ -f "/boot/config-$(uname -r)" ]; then
        TICKS="$( sed -e'/^ *CONFIG_HZ=/!d' -e's/^ *CONFIG_HZ=//' "/boot/config-$(uname -r)" )"
        if [ -z "$TICKS" ]; then
            echo "Unable to extract CONFIG_HZ from /boot/config-$(uname -r)" >&2
            exit 1
        fi
    else
        # Some VPS don't provide /boot, so take a guess (or TICKS may be set in $SELG.conf)
        [ -z "$TICKS" ] && TICKS=100
    fi

    [ -n "$DEBUG" ] && $IPT -nvL "$Chain" --line-numbers
    BC="$(command -v bc)"
    if [ -z "$BC" ]; then
        echo "'bc' is required to decode timestamps.  Please install 'bc' and ensure it is on your PATH" >&2
    fi

    LT=
    [ -f "$ProcRecent/$BlackBase" ]    && LT="$ProcRecent/$BlackBase"
    [ -f "$ProcRecent/${BlackBase}6" ] && LT="$LT $ProcRecent/${BlackBase}6"
    [ -z "$LT" ] && exit 1

    # shellcheck disable=SC2086  # Word splitting required for file list.
    cat $LT | (
        TOT=0
        #     6fff:ffff:ffff:ffff:6fff:ffff:ffff:ffff/128
        Dots=".................................................."
        while IFS= read -r LINE ; do
            TOT="$(( TOT + 1 ))"
            IP="$(echo "$LINE" | sed -e's/^src=\([^ ]*\) .*$/\1/')"
            if [ -z "$NOHOST" ] && HN="$(2>/dev/null host "$IP")"; then
                HN="$(echo "$HN" | sed -e's/^.*\.arpa domain name pointer \(.*\).$/\1/i')"
                if [ -n "$HN" ]; then
                    HN=" ($HN)"
                else
                    HN=
                fi
            else
                HN=
            fi
            # Last seen in jiffies
            SEEN="$( echo "$LINE" | sed -e's/.*last_seen: *\([0-9][0-9]*\) .*$/\1/' )"
            if [ -n "$BC" ]; then
                # Convert SEEN to seconds since epoch

                # Now in jiffies
                NOW="$( bc <<<"$(date +%s) * $TICKS" )"

                # Uptime in (float) seconds => jiffies
                UPT="$(cat /proc/uptime )"
                if [[ "$UPT" =~ ^([0-9]+(\.[0-9]*)?) ]]; then
                    UPT="${BASH_REMATCH[1]}"
                else
                    echo "/proc/uptime: $UPT unrecognized"
                    exit 1
                fi
                UPT="$( bc <<<"( $UPT * $TICKS ) / 1" )"

                # Seem to get junk in high nibble of timestamp (iptables 1.4.19.1)
                SEEN="$(( SEEN & 0x0fffffff ))"

                # Seconds since epoch
                SSE="$( bc <<<"( ( ( $NOW - $UPT ) + $SEEN + ( $TICKS / 2 ) ) / $TICKS )" )"

               # Format date as text
                if [ -n "$DateFormat" ]; then
                    DATE="$( date "-d@$SSE" "$DateFormat" )"
                else # Use default (ctime) format
                    DATE="$( date "-d@$SSE" )"
                fi
            else
                DATE="$SEEN tsb"
            fi
            [ -n "$DEBUG" ] && echo "IP: $IP NOW: $NOW UP: $UPT TICKS: $TICKS SEEN: $SEEN SSE: $SSE DATE: $DATE$HN"

            echo "$IP ${Dots:${#IP}} $DATE$HN"
        done

        if [ -n "$V" ]; then
            if [ "$TOT" -eq 0 ]; then
                echo "No blocked addresses"
            elif [ "$TOT" -eq 1 ]; then
                echo "1 blocked address"
            else
                echo "$TOT blocked addresses"
            fi
        fi
    )
    exit
fi

if [ "$ACTION" == "flush" ]; then
    echo "$IPTclear" >"$ProcRecent/$BlackList"
    [ -n "$V" ] && echo "Flushed block list"
    exit
fi

while [ -n "$1" ]; do
    [ -n "$DEBUG" ] && echo "Processing $1"
    h=
    if [ "$IPV" == "4" ]; then                                     # IPv4 mode
        if [[ "$1" =~ ^[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+$ ]]; then # IPv4 numeric
            i="$1"
            if [ -n "$V" ]; then
                h="$(/usr/bin/host "$1" | sed -e'/[.]in-addr[.]arpa domain name pointer /i!d' -e's/.*[.]in-addr[.]arpa domain name pointer \(.*\)/\1/i')"
                [ -n "$h" ] || h="[no hostname]"
            fi
        else                                                       # IPv4 hostname
            i="$(/usr/bin/host "$1" | sed -e'/ has address /!d' -e's/.*has address \(.*\)/\1/')"
            if [ -z "$i" ]; then
                echo "$1 has no IPv4 address"
                shift
                continue;
            fi
            h="$1"
        fi
    elif [[ "$1" =~ [:] ]] && [[ "$1"  =~ ^[0-9a-zA-Z:]+$ ]]; then # IPv6 numeric
        i="$1"
        if [ -n "$V" ]; then
            h="$(/usr/bin/host "$i" | sed -e'/[.]ip6[.]arpa domain name pointer /i!d' -e's/.*ip6[.]arpa domain name pointer \(.*\)/\1/i')"
            [ -n "$h" ] || h="[no hostname]"
        fi
    else                                                           # IPv6 hostname
        i="$(/usr/bin/host "$1" | sed -e'/ has IPv6 address /i!d' -e's/.*has IPv6 address \(.*\)/\1/i')"
        if [ -z "$i" ]; then
            echo "$1 has no IPv6 address"
            shift
            continue;
        fi
        h="$1"
    fi
    shift

    if [ "$ACTION" == "add" ]; then
        for I in $i; do
            echo "$IPTadd$I" >"$ProcRecent/$BlackList"
            [ -n "$V" ] && echo "Added $h $I"
        done
    else
        for I in $i; do
            echo "-$I" >"$ProcRecent/$BlackList"
            [ -n "$V" ] && echo "Removed $h $I"
        done
    fi
done
